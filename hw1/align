#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
from datetime import datetime

start = datetime.now()

optparser = optparse.OptionParser()
optparser.add_option("-b", "--bitext", dest="bitext", default="data/dev-test-train.de-en", help="Parallel corpus (default data/dev-test-train.de-en)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()

sys.stderr.write("Training with IBM Model 1...\n")
bitext = [[sentence.strip().lower().split() for sentence in pair.split(' ||| ')] for pair in open(opts.bitext)][:opts.num_sents]

f_count = {}
e_count = {}
probs = {}
iteration = 0

fprobs = {}

eVocab = []
fVocab = []
for (n, (f, e)) in enumerate(bitext):
  for word in set(e):
    eVocab.append(word)
  for word in set(f):
    fVocab.append(word)
initialProb = float(1.0)/float(len(set(eVocab)))
f_initialProb = float(1.0)/float(len(set(fVocab)))

while iteration < 5:
  iteration += 1
  print iteration, "iterations...", datetime.now() - start
  count = {}
  total = {}
  norm = {}

  fcount = {}
  ftotal = {}
  fnorm = {}
  for (n, (f, e)) in enumerate(bitext):

    for eng in e:
      norm[eng] = 0
      for forg in f:
        if iteration == 1:
          try:
            probs[eng][forg] = initialProb
          except:
            probs[eng] = {forg:initialProb}
        norm[eng] += probs[eng][forg]

    for forg in f:
      fnorm[forg] = 0
      for eng in e:
        if iteration == 1:
          try:
            fprobs[forg][eng] = f_initialProb
          except:
            fprobs[forg] = {eng:f_initialProb}
        fnorm[forg] += fprobs[forg][eng]

    for forg in f:
      try:
        fcount[forg]
      except KeyError:
        fcount[forg] = {}
      for eng in e: 
          try:
            fcount[forg][eng] += fprobs[forg][eng]/fnorm[forg]
          except:
            fcount[forg][eng] = fprobs[forg][eng]/fnorm[forg]
          try:
            ftotal[eng] += fprobs[forg][eng]/fnorm[forg]
          except:
            ftotal[eng] = fprobs[forg][eng]/fnorm[forg]

    for eng in e:
      try:
        count[eng]
      except KeyError:
        count[eng] = {}
      for forg in f: 
          try:
            count[eng][forg] += probs[eng][forg]/norm[eng]
          except:
            count[eng][forg] = probs[eng][forg]/norm[eng]
          try:
            total[forg] += probs[eng][forg]/norm[eng]
          except:
            total[forg] = probs[eng][forg]/norm[eng]

  for (n, (f, e)) in enumerate(bitext):
    for forg in f:
      for eng in e:
        probs[eng][forg] = count[eng][forg]/total[forg]

  for (n, (f, e)) in enumerate(bitext):
    for eng in e:
      for forg in f:
        fprobs[forg][eng] = fcount[forg][eng]/ftotal[eng]

output = open("model1.out", "w")
punct = ['.',',','?','!',"'"]
for (n, (f, e)) in enumerate(bitext):
  for i in range(len(e)):
    eng = e[i]
    if eng in punct:
      puncts = [k for k, j in enumerate(f) if j==eng]
      if len(puncts) == 1:
        output.write(str(f.index(eng))+"-"+str(i)+" ")
      else:
        difference = 100
        best = 'x'
        for x in puncts:
          if abs(x-i) < difference:
            difference = abs(x-i)
            best = x
        if best != 'x':
          output.write(str(best)+"-"+str(i)+" ")
      continue
    possibilities = [0] * len(f)

    for j in range(len(f)):
      forg = f[j]
      if forg not in punct:
        possibilities[j] = probs[eng][forg] * fprobs[forg][eng]

    m = max(possibilities)
    maxes = [k for k, j in enumerate(possibilities) if j == m]
    if len(maxes) == 1:
      output.write(str(possibilities.index(m))+"-"+str(i)+" ")

    else:
      difference = 100
      best = 'x'
      for x in maxes:
        if abs(x-i) < difference:
          difference = abs(x-i)
          best = x
      if best != 'x':
        output.write(str(best)+"-"+str(i)+" ")
  output.write("\n")

