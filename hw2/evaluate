#!/usr/bin/env python
 # -*- coding: utf-8 -*-
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
from scipy import stats
from sklearn.linear_model import LogisticRegression
import numpy as np
from nltk.tokenize import word_tokenize
from nltk.util import ngrams
 
class LogRegModel:
    def __init__(self):
      self.model = LogisticRegression()
      self.allFeatures = []
    def extract_features(self, h1, h2, ref):
      featureSet = {}
      precision1 = 0
      recall1 = 0
      total_p1 = 0
      total_r1 = 0
      precision2 = 0
      recall2 = 0
      total_p2 = 0
      total_r2 = 0
      for n in range(0,3):
        for word in h1[n]:
          total_p1 += 1
          if word in ref[n]:
            precision1 += 1
            print word
        for word in h2[n]:
          total_p2 += 1
          if word in ref[n]:
            precision2 += 1
        for word in ref[n]:
          total_r1 += 1
          total_r2 += 1
          if word in h1[n]:
            recall1 += 1
          if word in h2[n]:
            recall2 += 1
        featureSet[str(n)+"-precision-h1"] = float(precision1)/float(total_p1)
        featureSet[str(n)+"-precision-h2"] = float(precision2)/float(total_p2)
        featureSet[str(n)+"-recall-h1"] = float(recall1)/float(total_r1)
        featureSet[str(n)+"-recall-h2"] = float(recall2)/float(total_r2)
        precision1 = 0
        recall1 = 0
        total_p1 = 0
        total_r1 = 0
        precision2 = 0
        recall2 = 0
        total_p2 = 0
        total_r2 = 0

      


'''
def dependency_matches(h, ref, dependency_parser):
    precision = 0
    recall = 0
    total_p = 0
    total_r = 0
    h = unicode(" ".join(h).lower(), 'utf-8')
    ref = unicode(" ".join(ref).lower(), 'utf-8')
    h_result = dependency_parser.raw_parse(h)
    h_dep = h_result.next()
    try:
      h_deps = list(h_dep.triples())
    except:
      return 0.0
    try:
      ref_result = dependency_parser.raw_parse(ref)
    except:
      return 0.0
    ref_dep = ref_result.next()
    try:
      ref_deps = list(ref_dep.triples())
    except:
      return 0.0  
    for dep in h_deps:
      total_p += 1
      h_triple = dep[0][0]+"-"+dep[1]
      for r in ref_deps:
        r_triple = r[0][0]+"-"+r[1]
        if h_triple == r_triple:
          precision += 1
    for dep in ref_deps:
      total_r += 1
      r_triple = dep[0][0]+"-"+dep[1]
      for h in h_deps:
        h_triple = h[0][0]+"-"+h[1]
        if h_triple == r_triple:
          recall += 1
    try:
      p = float(precision)/float(total_p)
    except:
      p = 0
    try:
      r = float(recall)/float(total_r)
    except:
      r = 0
    try:
      out = stats.hmean([p, r])
    except:
      out = 0
    return out
'''

def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
    # or sum(w in ref for w in f) # cast bool -> int
    # or sum(map(ref.__contains__, h)) # ugly!
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    # PEP8: use ' and not " for strings
    parser.add_argument('-i', '--input', default='data/train-test.hyp1-hyp2-ref',
            help='input file (default data/train-test.hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()

    #path_to_jar = 'stanford-parser-full-2014-08-27/stanford-parser.jar'
    #path_to_models_jar = 'stanford-parser-full-2014-08-27/stanford-parser-3.4.1-models.jar'
    #dependency_parser = StanfordDependencyParser(path_to_jar=path_to_jar, path_to_models_jar=path_to_models_jar)
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    def get_ngrams(text, n ):
      n_grams = ngrams(word_tokenize(text), n)
      return [ ' '.join(grams) for grams in n_grams]

    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        rset = set(ref)
        allgrams1 = [get_ngrams(" ".join(h1), 1)] + [get_ngrams(" ".join(h1), 2)] + [get_ngrams(" ".join(h1), 3)] + [get_ngrams(" ".join(h1), 4)]
        allgrams2 = get_ngrams(" ".join(h1), 1) + get_ngrams(" ".join(h1), 2) + get_ngrams(" ".join(h1), 3) + get_ngrams(" ".join(h1), 4)
        allgrams_ref = get_ngrams(" ".join(h1), 1) + get_ngrams(" ".join(h1), 2) + get_ngrams(" ".join(h1), 3) + get_ngrams(" ".join(h1), 4)
        LogRegModel()
        #h1_match = word_matches(h1, rset)
        #h2_match = word_matches(h2, rset)
        #h1_match = dependency_matches(h1, ref, dependency_parser)
        #h2_match = dependency_matches(h2, ref, dependency_parser)
        print(-1 if h1_match > h2_match else # \begin{cases}
                (0 if h1_match == h2_match
                    else 1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
